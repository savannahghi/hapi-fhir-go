
package fhir430

import (
	"encoding/json"
	"fmt"
	"strings"
)
// StructureMapTargetListMode is documented here http://hl7.org/fhir/ValueSet/map-target-list-mode
type StructureMapTargetListMode int

const (
	StructureMapTargetListModeFirst StructureMapTargetListMode = iota
	StructureMapTargetListModeShare
	StructureMapTargetListModeLast
	StructureMapTargetListModeCollate
)

func (code StructureMapTargetListMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *StructureMapTargetListMode) UnmarshalJSON(input []byte) error {
	var s string
	if err := json.Unmarshal(input, &s); err != nil {
		return fmt.Errorf("failed to Unmarshal StructureMapTargetListMode code `%s`", s)
	}
	s = strings.ToLower(s)
	switch s {
	case "first":
		*code = StructureMapTargetListModeFirst
	case "share":
		*code = StructureMapTargetListModeShare
	case "last":
		*code = StructureMapTargetListModeLast
	case "collate":
		*code = StructureMapTargetListModeCollate
	default:
		return fmt.Errorf("unknown StructureMapTargetListMode code `%s`", s)
	}
	return nil
}
func (code StructureMapTargetListMode) String() string {
	return code.Code()
}
func (code StructureMapTargetListMode) Code() string {
	switch code {
	case StructureMapTargetListModeFirst:
		return "first"
	case StructureMapTargetListModeShare:
		return "share"
	case StructureMapTargetListModeLast:
		return "last"
	case StructureMapTargetListModeCollate:
		return "collate"
	}
	return "<unknown>"
}
func (code StructureMapTargetListMode) Display() string {
	switch code {
	case StructureMapTargetListModeFirst:
		return "First"
	case StructureMapTargetListModeShare:
		return "Share"
	case StructureMapTargetListModeLast:
		return "Last"
	case StructureMapTargetListModeCollate:
		return "Collate"
	}
	return "<unknown>"
}
func (code StructureMapTargetListMode) Definition() string {
	switch code {
	case StructureMapTargetListModeFirst:
		return "when the target list is being assembled, the items for this rule go first. If more than one rule defines a first item (for a given instance of mapping) then this is an error."
	case StructureMapTargetListModeShare:
		return "the target instance is shared with the target instances generated by another rule (up to the first common n items, then create new ones)."
	case StructureMapTargetListModeLast:
		return "when the target list is being assembled, the items for this rule go last. If more than one rule defines a last item (for a given instance of mapping) then this is an error."
	case StructureMapTargetListModeCollate:
		return "re-use the first item in the list, and keep adding content to it."
	}
	return "<unknown>"
}
